# PyMOL License GUI
# Copyright Schrodinger, Inc.

from __future__ import absolute_import
from __future__ import print_function

import os
import sys

from pymol import licensing
from pymol.Qt import QtCore, QtWidgets
from pymol.Qt.utils import AsyncFunc, MainThreadCaller


class ActivationDialog(object):
    def __init__(self, parent):
        self.pymolwidget = parent.pymolwidget
        self.form = parent.load_form('activation')
        self.form._dialog.setModal(True)
        self.form.button_skip.clicked.connect(self.hide)
        self.form.button_browse.clicked.connect(self.browse)

        # internet request in worker thread
        self.check_site_license_async = AsyncFunc(
                licensing.get_site_license_key,
                self.confirm_site_license)

        self.check_site_license_async()

    def browse(self):
        fnames = QtWidgets.QFileDialog.getOpenFileNames(
            self.form._dialog,
            'Open file',
            filter='License File (*.lic);;All Files (*)')[0]

        for fname in fnames:
            self.hide()
            licensing.install_license_file(fname)
            break

    def hide(self):
        self.form._dialog.hide()
        self.pymolwidget.cmd.refresh_wizard()

    def show(self):
        self.form._dialog.show()

    def confirm_site_license(self, key):
        if not key:
            return False

        QMB = QtWidgets.QMessageBox
        answer = QMB.question(
            self.form._dialog,
            "Use Site License Key?",
        "Your IP is registered with a PyMOL site license. "
        "Do you want to use the autodetected site license key?", QMB.Yes |
        QMB.No, QMB.Yes)

        if answer == QMB.Yes:
            self.hide()
            licensing.install_license_key(key)


def notify_success(self, info):
    if self.activationcounts > 0:
        # License checked at least twice, assume a license
        # file was installed, proclaim success
        QtWidgets.QMessageBox.information(self,
                "Success",
                "License was successfully installed")
    elif 'days' in info:
        # close to license expiry date

        try:
            # remind once per week, last week every day
            interval = 1 if float(info['days']) < 7 else 7
        except ValueError as e:
            print('value error:', e)
            interval = 7

        snoozetime = 60 * 60 * 24 * interval
        snoozefile = os.path.expanduser('~/.pymol/snoozeexpirynotice.tmp')

        # check timestamp of snooze file
        import time
        try:
            if os.path.getmtime(snoozefile) + snoozetime > time.time():
                return
        except OSError:
            pass

        # touch snooze file
        try:
            with open(snoozefile, 'w') as handle:
                pass
        except OSError:
            pass

        # expiring soon, notify user
        QtWidgets.QMessageBox.information(self,
                "License expiring soon",
                "Your license will expire in %s days. Please visit<br>"
                "<a href='https://pymol.org/buy'>https://pymol.org/buy</a>"
                "<br>or contact<br>"
                "<a href='mailto:sales@schrodinger.com'>sales@schrodinger.com</a>"
                "<br>at your earliest convenience to renew your license."
                % info["days"])


def show_activationdialog(self):
    if self.activationdialog is None:
        self.activationdialog = ActivationDialog(self)

    self.activationdialog.show()


def setup_activationdialog(self):
    self.activationdialog = None
    self.activationcounts = 0

    timer = QtCore.QTimer()
    timer.setSingleShot(True)
    timer.setInterval(100)

    callInMainThread = MainThreadCaller()

    @timer.timeout.connect
    def _():
        info = self.activationinfo
        licensing.print_info(info, False)

        if 'msg' not in info:
            # valid license
            notify_success(self, info)
            return

        self.activationcounts += 1

        show_activationdialog(self)

    # license check failure notification
    @licensing.set_post_license_check_handler
    def _(msg):
        self.activationinfo = msg
        callInMainThread(timer.start)
