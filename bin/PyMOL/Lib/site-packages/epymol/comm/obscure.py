#
# Obscure an object to protect property rights.
#

from __future__ import print_function

from pymol import cmd

hiding_sc = cmd.Shortcut(['low', 'medium', 'high'])

@cmd.extendaa(cmd.auto_arg[1]['select'], [hiding_sc, 'hiding level', ', '])
def obscure(selection, hiding="medium", keep=0, state=-1, name_map='', name_iso='', quiet=0, _self=cmd):
    """
DESCRIPTION

    Given an object or selection, usually a small molecule, obscure it
    to protect its exact identity.

USAGE

    obscure selection [, hiding [, keep ]]

ARGUMENTS

    selection = str: atom selection to hide

    hiding = low|medium|high: level to which PyMOL obscures the object {default: medium}

    keep = 0/1: by default, PyMOL removes the obscured atoms from your file,
    this flag will keep the atoms in the file.  Be careful!

NOTES

    Large molecules are very slow.
    """
    from chempy.cpv import add, scale, random_vector

    keep = bool(keep) if not keep else int(keep)
    quiet = int(quiet)

    hiding = hiding_sc.auto_err(hiding, 'hiding level')
    hiding = ['low', 'medium', 'high'].index(hiding)

    # these parameters are fine-tuned for a good visual experience
    resolution, grid, level = [
        [2.00, 0.18, 2.00], # low
        [3.75, 0.25, 2.50], # medium
        [4.00, 0.33, 2.00], # high
    ][hiding]

    # detect if we're hiding a subset of a molecule, then add one bond, so ensure that what sticks out looks good
    tmp_sele = _self.get_unused_name("_target")
    natoms = _self.select(tmp_sele,  "(%s) extend 1" % (selection), 0)

    if not quiet:
        print(' Obscuring %d atoms' % natoms)

    # get a new name for the map/surf
    if not name_map:
        name_map = _self.get_unused_name("obsc_map")
    if not name_iso:
        name_iso = _self.get_unused_name("obsc_surf")

    if not keep:
        # randomize the coordinates
        _self.alter_state(state, tmp_sele, "(x,y,z)=perturb([x,y,z])", space={'perturb':
            lambda v: add(v, scale(random_vector(), 0.4))})

        # clear out charge and b-factor
        _self.alter(tmp_sele, "(b,q) = (10.0, 1.0)")

    # make the gaussian map and draw its surface
    _self.map_new(name_map, "gaussian", grid, tmp_sele, resolution=resolution, quiet=quiet)
    _self.isosurface(name_iso, name_map, level, quiet=quiet)

    if not keep:
        if natoms == _self.count_atoms('byobject (%s)' % (tmp_sele)):
            names = ' '.join(_self.get_object_list('(%s)' % (selection)))
            if not quiet:
                print(' Deleting object:', names)
            _self.delete(names)
        else:
            _self.remove(selection, quiet=quiet)

    _self.delete(tmp_sele)
